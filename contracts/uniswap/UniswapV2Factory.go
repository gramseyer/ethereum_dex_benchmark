// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package UniswapV2Factory

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// UniswapV2FactoryMetaData contains all meta data concerning the UniswapV2Factory contract.
var UniswapV2FactoryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b506040516200492938038062004929833981810160405281019061003491906100de565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061010b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ab82610080565b9050919050565b6100bb816100a0565b81146100c657600080fd5b50565b6000815190506100d8816100b2565b92915050565b6000602082840312156100f4576100f361007b565b5b6000610102848285016100c9565b91505092915050565b61480e806200011b6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a2e74af61161005b578063a2e74af614610117578063c9c6539614610133578063e6a4390514610163578063f46901ed1461019357610088565b8063017e7e581461008d578063094b7415146100ab5780631e3dd18b146100c9578063574f2ba3146100f9575b600080fd5b6100956101af565b6040516100a291906109c7565b60405180910390f35b6100b36101d3565b6040516100c091906109c7565b60405180910390f35b6100e360048036038101906100de9190610a1d565b6101f9565b6040516100f091906109c7565b60405180910390f35b610101610238565b60405161010e9190610a59565b60405180910390f35b610131600480360381019061012c9190610aa0565b610245565b005b61014d60048036038101906101489190610acd565b610319565b60405161015a91906109c7565b60405180910390f35b61017d60048036038101906101789190610acd565b610864565b60405161018a91906109c7565b60405180910390f35b6101ad60048036038101906101a89190610aa0565b6108a6565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6003818154811061020957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600380549050905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102cc90610b6a565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610389576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038090610bd6565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16106103c65783856103c9565b84845b91509150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361043c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043390610c42565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610547576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053e90610cae565b60405180910390fd5b60006040518060200161055990610979565b6020820181038252601f19601f82011660405250905060008383604051602001610584929190610d16565b604051602081830303815290604052805190602001209050808251602084016000f594508473ffffffffffffffffffffffffffffffffffffffff1663485cc95585856040518363ffffffff1660e01b81526004016105e3929190610d42565b600060405180830381600087803b1580156105fd57600080fd5b505af1158015610611573d6000803e3d6000fd5b5050505084600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506003859080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e987600380549050604051610852929190610d6b565b60405180910390a35050505092915050565b60026020528160005260406000206020528060005260406000206000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610936576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092d90610b6a565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b613a1d80610d9583390190565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109b182610986565b9050919050565b6109c1816109a6565b82525050565b60006020820190506109dc60008301846109b8565b92915050565b600080fd5b6000819050919050565b6109fa816109e7565b8114610a0557600080fd5b50565b600081359050610a17816109f1565b92915050565b600060208284031215610a3357610a326109e2565b5b6000610a4184828501610a08565b91505092915050565b610a53816109e7565b82525050565b6000602082019050610a6e6000830184610a4a565b92915050565b610a7d816109a6565b8114610a8857600080fd5b50565b600081359050610a9a81610a74565b92915050565b600060208284031215610ab657610ab56109e2565b5b6000610ac484828501610a8b565b91505092915050565b60008060408385031215610ae457610ae36109e2565b5b6000610af285828601610a8b565b9250506020610b0385828601610a8b565b9150509250929050565b600082825260208201905092915050565b7f556e697377617056323a20464f5242494444454e000000000000000000000000600082015250565b6000610b54601483610b0d565b9150610b5f82610b1e565b602082019050919050565b60006020820190508181036000830152610b8381610b47565b9050919050565b7f556e697377617056323a204944454e544943414c5f4144445245535345530000600082015250565b6000610bc0601e83610b0d565b9150610bcb82610b8a565b602082019050919050565b60006020820190508181036000830152610bef81610bb3565b9050919050565b7f556e697377617056323a205a45524f5f41444452455353000000000000000000600082015250565b6000610c2c601783610b0d565b9150610c3782610bf6565b602082019050919050565b60006020820190508181036000830152610c5b81610c1f565b9050919050565b7f556e697377617056323a20504149525f45584953545300000000000000000000600082015250565b6000610c98601683610b0d565b9150610ca382610c62565b602082019050919050565b60006020820190508181036000830152610cc781610c8b565b9050919050565b60008160601b9050919050565b6000610ce682610cce565b9050919050565b6000610cf882610cdb565b9050919050565b610d10610d0b826109a6565b610ced565b82525050565b6000610d228285610cff565b601482019150610d328284610cff565b6014820191508190509392505050565b6000604082019050610d5760008301856109b8565b610d6460208301846109b8565b9392505050565b6000604082019050610d8060008301856109b8565b610d8d6020830184610a4a565b939250505056fe60806040526001600b5534801561001557600080fd5b5060004690505033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506139b18061006c6000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c806370a08231116100c3578063ba9a7a561161007c578063ba9a7a56146103f6578063bc25cf7714610414578063c45a015514610430578063d21220a71461044e578063dd62ed3e1461046c578063fff6cae91461049c57610158565b806370a08231146102f95780637464fc3d146103295780637ecebe001461034757806389afcb441461037757806395d89b41146103a8578063a9059cbb146103c657610158565b806323b872dd1161011557806323b872dd14610223578063313ce56714610253578063485cc955146102715780635909c0d51461028d5780635a3d5493146102ab5780636a627842146102c957610158565b8063022c0d9f1461015d57806306fdde03146101795780630902f1ac14610197578063095ea7b3146101b75780630dfe1681146101e757806318160ddd14610205575b600080fd5b61017760048036038101906101729190612a61565b6104a6565b005b610181610af8565b60405161018e9190612b79565b60405180910390f35b61019f610b31565b6040516101ae93929190612be3565b60405180910390f35b6101d160048036038101906101cc9190612c1a565b610b8e565b6040516101de9190612c75565b60405180910390f35b6101ef610ba5565b6040516101fc9190612c9f565b60405180910390f35b61020d610bcb565b60405161021a9190612cc9565b60405180910390f35b61023d60048036038101906102389190612ce4565b610bd1565b60405161024a9190612c75565b60405180910390f35b61025b610d9c565b6040516102689190612d53565b60405180910390f35b61028b60048036038101906102869190612d6e565b610da1565b005b610295610eb7565b6040516102a29190612cc9565b60405180910390f35b6102b3610ebd565b6040516102c09190612cc9565b60405180910390f35b6102e360048036038101906102de9190612dae565b610ec3565b6040516102f09190612cc9565b60405180910390f35b610313600480360381019061030e9190612dae565b6112ac565b6040516103209190612cc9565b60405180910390f35b6103316112c4565b60405161033e9190612cc9565b60405180910390f35b610361600480360381019061035c9190612dae565b6112ca565b60405161036e9190612cc9565b60405180910390f35b610391600480360381019061038c9190612dae565b6112e2565b60405161039f929190612ddb565b60405180910390f35b6103b061178c565b6040516103bd9190612b79565b60405180910390f35b6103e060048036038101906103db9190612c1a565b6117c5565b6040516103ed9190612c75565b60405180910390f35b6103fe6117dc565b60405161040b9190612cc9565b60405180910390f35b61042e60048036038101906104299190612dae565b6117e2565b005b610438611a0e565b6040516104459190612c9f565b60405180910390f35b610456611a34565b6040516104639190612c9f565b60405180910390f35b61048660048036038101906104819190612d6e565b611a5a565b6040516104939190612cc9565b60405180910390f35b6104a4611a7f565b005b6001600b54146104eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e290612e50565b60405180910390fd5b6000600b8190555060008511806105025750600084115b610541576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053890612ee2565b60405180910390fd5b60008061054c610b31565b5091509150816dffffffffffffffffffffffffffff168710801561057f5750806dffffffffffffffffffffffffffff1686105b6105be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b590612f74565b60405180910390fd5b6000806000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161415801561067757508073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614155b6106b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ad90612fe0565b60405180910390fd5b60008b11156106cb576106ca828a8d611c50565b5b60008a11156106e0576106df818a8c611c50565b5b6000888890501115610760578873ffffffffffffffffffffffffffffffffffffffff166310d1e85c338d8d8c8c6040518663ffffffff1660e01b815260040161072d95949392919061304d565b600060405180830381600087803b15801561074757600080fd5b505af115801561075b573d6000803e3d6000fd5b505050505b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107999190612c9f565b602060405180830381865afa1580156107b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107da91906130b0565b93508073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108159190612c9f565b602060405180830381865afa158015610832573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085691906130b0565b92505050600089856dffffffffffffffffffffffffffff16610878919061310c565b83116108855760006108ad565b89856dffffffffffffffffffffffffffff166108a1919061310c565b836108ac919061310c565b5b9050600089856dffffffffffffffffffffffffffff166108cd919061310c565b83116108da576000610902565b89856dffffffffffffffffffffffffffff166108f6919061310c565b83610901919061310c565b5b905060008211806109135750600081115b610952576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610949906131b2565b60405180910390fd5b600061098e61096b600385611dda90919063ffffffff16565b6109806103e888611dda90919063ffffffff16565b611e4790919063ffffffff16565b905060006109cc6109a9600385611dda90919063ffffffff16565b6109be6103e888611dda90919063ffffffff16565b611e4790919063ffffffff16565b9050610a16620f4240610a08896dffffffffffffffffffffffffffff168b6dffffffffffffffffffffffffffff16611dda90919063ffffffff16565b611dda90919063ffffffff16565b610a298284611dda90919063ffffffff16565b1015610a6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a619061321e565b60405180910390fd5b5050610a7884848888611ea0565b8873ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d82284848f8f604051610adb949392919061323e565b60405180910390a35050505050506001600b819055505050505050565b6040518060400160405280600a81526020017f556e69737761702056320000000000000000000000000000000000000000000081525081565b6000806000600760009054906101000a90046dffffffffffffffffffffffffffff1692506007600e9054906101000a90046dffffffffffffffffffffffffffff1691506007601c9054906101000a900463ffffffff169050909192565b6000610b9b338484612194565b6001905092915050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610d8657610d0582600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e4790919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b610d9184848461227f565b600190509392505050565b601281565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e28906132cf565b60405180910390fd5b81600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60085481565b60095481565b60006001600b5414610f0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0190612e50565b60405180910390fd5b6000600b81905550600080610f1d610b31565b50915091506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f7f9190612c9f565b602060405180830381865afa158015610f9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc091906130b0565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161101f9190612c9f565b602060405180830381865afa15801561103c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106091906130b0565b90506000611087856dffffffffffffffffffffffffffff1684611e4790919063ffffffff16565b905060006110ae856dffffffffffffffffffffffffffff1684611e4790919063ffffffff16565b905060006110bc8787612413565b90506000805490506000810361110f576110fb6103e86110ed6110e88688611dda90919063ffffffff16565b6125e4565b611e4790919063ffffffff16565b985061110a60006103e861265e565b611176565b611173886dffffffffffffffffffffffffffff166111368387611dda90919063ffffffff16565b611140919061331e565b886dffffffffffffffffffffffffffff166111648487611dda90919063ffffffff16565b61116e919061331e565b612778565b98505b600089116111b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b0906133c1565b60405180910390fd5b6111c38a8a61265e565b6111cf86868a8a611ea0565b8115611247576112406007600e9054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff16600760009054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff16611dda90919063ffffffff16565b600a819055505b3373ffffffffffffffffffffffffffffffffffffffff167f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f858560405161128f929190612ddb565b60405180910390a250505050505050506001600b81905550919050565b60016020528060005260406000206000915090505481565b600a5481565b60036020528060005260406000206000915090505481565b6000806001600b541461132a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132190612e50565b60405180910390fd5b6000600b8190555060008061133d610b31565b50915091506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016113cb9190612c9f565b602060405180830381865afa1580156113e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140c91906130b0565b905060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114499190612c9f565b602060405180830381865afa158015611466573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148a91906130b0565b90506000600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006114dc8888612413565b9050600080549050806114f88685611dda90919063ffffffff16565b611502919061331e565b9a50806115188585611dda90919063ffffffff16565b611522919061331e565b995060008b118015611534575060008a115b611573576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156a90613453565b60405180910390fd5b61157d3084612791565b611588878d8d611c50565b611593868d8c611c50565b8673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016115cc9190612c9f565b602060405180830381865afa1580156115e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160d91906130b0565b94508573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016116489190612c9f565b602060405180830381865afa158015611665573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168991906130b0565b935061169785858b8b611ea0565b811561170f576117086007600e9054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff16600760009054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff16611dda90919063ffffffff16565b600a819055505b8b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364968d8d60405161176e929190612ddb565b60405180910390a35050505050505050506001600b81905550915091565b6040518060400160405280600681526020017f554e492d5632000000000000000000000000000000000000000000000000000081525081565b60006117d233848461227f565b6001905092915050565b6103e881565b6001600b5414611827576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181e90612e50565b60405180910390fd5b6000600b819055506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061193f828461193a600760009054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016118eb9190612c9f565b602060405180830381865afa158015611908573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192c91906130b0565b611e4790919063ffffffff16565b611c50565b611a0181846119fc6007600e9054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016119ad9190612c9f565b602060405180830381865afa1580156119ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ee91906130b0565b611e4790919063ffffffff16565b611c50565b50506001600b8190555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002602052816000526040600020602052806000526040600020600091509150505481565b6001600b5414611ac4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611abb90612e50565b60405180910390fd5b6000600b81905550611c46600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611b2a9190612c9f565b602060405180830381865afa158015611b47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6b91906130b0565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611bc69190612c9f565b602060405180830381865afa158015611be3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0791906130b0565b600760009054906101000a90046dffffffffffffffffffffffffffff166007600e9054906101000a90046dffffffffffffffffffffffffffff16611ea0565b6001600b81905550565b6000808473ffffffffffffffffffffffffffffffffffffffff166040518060400160405280601981526020017f7472616e7366657228616464726573732c75696e743235362900000000000000815250805190602001208585604051602401611cba929190613473565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611d2491906134e3565b6000604051808303816000865af19150503d8060008114611d61576040519150601f19603f3d011682016040523d82523d6000602084013e611d66565b606091505b5091509150818015611d945750600081511480611d93575080806020019051810190611d929190613526565b5b5b611dd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dca9061359f565b60405180910390fd5b5050505050565b600080821480611e02575082828385611df391906135bf565b925082611e00919061331e565b145b611e41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e389061364d565b60405180910390fd5b92915050565b6000828284611e56919061310c565b9150811115611e9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e91906136b9565b60405180910390fd5b92915050565b6dffffffffffffffffffffffffffff80168411158015611ed057506dffffffffffffffffffffffffffff80168311155b611f0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0690613725565b60405180910390fd5b600064010000000042611f229190613745565b905060006007601c9054906101000a900463ffffffff1682611f449190613776565b905060008163ffffffff16118015611f6d57506000846dffffffffffffffffffffffffffff1614155b8015611f8a57506000836dffffffffffffffffffffffffffff1614155b15612090578063ffffffff16611fcf85611fa3866128ab565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166128df90919063ffffffff16565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16611ff791906135bf565b6008600082825461200891906137ae565b925050819055508063ffffffff1661204f84612023876128ab565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166128df90919063ffffffff16565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1661207791906135bf565b6009600082825461208891906137ae565b925050819055505b85600760006101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff160217905550846007600e6101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff160217905550816007601c6101000a81548163ffffffff021916908363ffffffff1602179055507f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1600760009054906101000a90046dffffffffffffffffffffffffffff166007600e9054906101000a90046dffffffffffffffffffffffffffff166040516121849291906137e2565b60405180910390a1505050505050565b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516122729190612cc9565b60405180910390a3505050565b6122d181600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e4790919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061236681600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461290590919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516124069190612cc9565b60405180910390a3505050565b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa158015612483573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a79190613820565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141591506000600a54905082156125ca57600081146125c557600061252e612529866dffffffffffffffffffffffffffff16886dffffffffffffffffffffffffffff16611dda90919063ffffffff16565b6125e4565b9050600061253b836125e4565b9050808211156125c257600061256e61255d8385611e4790919063ffffffff16565b600054611dda90919063ffffffff16565b905060006125988361258a600587611dda90919063ffffffff16565b61290590919063ffffffff16565b9050600081836125a8919061331e565b905060008111156125be576125bd878261265e565b5b5050505b50505b6125dc565b600081146125db576000600a819055505b5b505092915050565b6000600382111561264b5781905060006001600284612603919061331e565b61260d91906137ae565b90505b8181101561264557809150600281828561262a919061331e565b61263491906137ae565b61263e919061331e565b9050612610565b50612659565b6000821461265857600190505b5b919050565b6126738160005461290590919063ffffffff16565b6000819055506126cb81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461290590919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161276c9190612cc9565b60405180910390a35050565b60008183106127875781612789565b825b905092915050565b6127e381600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e4790919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061283b81600054611e4790919063ffffffff16565b600081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161289f9190612cc9565b60405180910390a35050565b60006e010000000000000000000000000000826dffffffffffffffffffffffffffff166128d89190613875565b9050919050565b6000816dffffffffffffffffffffffffffff16836128fd91906138b7565b905092915050565b600082828461291491906137ae565b9150811015612958576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161294f90613934565b60405180910390fd5b92915050565b600080fd5b600080fd5b6000819050919050565b61297b81612968565b811461298657600080fd5b50565b60008135905061299881612972565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006129c98261299e565b9050919050565b6129d9816129be565b81146129e457600080fd5b50565b6000813590506129f6816129d0565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112612a2157612a206129fc565b5b8235905067ffffffffffffffff811115612a3e57612a3d612a01565b5b602083019150836001820283011115612a5a57612a59612a06565b5b9250929050565b600080600080600060808688031215612a7d57612a7c61295e565b5b6000612a8b88828901612989565b9550506020612a9c88828901612989565b9450506040612aad888289016129e7565b935050606086013567ffffffffffffffff811115612ace57612acd612963565b5b612ada88828901612a0b565b92509250509295509295909350565b600081519050919050565b600082825260208201905092915050565b60005b83811015612b23578082015181840152602081019050612b08565b60008484015250505050565b6000601f19601f8301169050919050565b6000612b4b82612ae9565b612b558185612af4565b9350612b65818560208601612b05565b612b6e81612b2f565b840191505092915050565b60006020820190508181036000830152612b938184612b40565b905092915050565b60006dffffffffffffffffffffffffffff82169050919050565b612bbe81612b9b565b82525050565b600063ffffffff82169050919050565b612bdd81612bc4565b82525050565b6000606082019050612bf86000830186612bb5565b612c056020830185612bb5565b612c126040830184612bd4565b949350505050565b60008060408385031215612c3157612c3061295e565b5b6000612c3f858286016129e7565b9250506020612c5085828601612989565b9150509250929050565b60008115159050919050565b612c6f81612c5a565b82525050565b6000602082019050612c8a6000830184612c66565b92915050565b612c99816129be565b82525050565b6000602082019050612cb46000830184612c90565b92915050565b612cc381612968565b82525050565b6000602082019050612cde6000830184612cba565b92915050565b600080600060608486031215612cfd57612cfc61295e565b5b6000612d0b868287016129e7565b9350506020612d1c868287016129e7565b9250506040612d2d86828701612989565b9150509250925092565b600060ff82169050919050565b612d4d81612d37565b82525050565b6000602082019050612d686000830184612d44565b92915050565b60008060408385031215612d8557612d8461295e565b5b6000612d93858286016129e7565b9250506020612da4858286016129e7565b9150509250929050565b600060208284031215612dc457612dc361295e565b5b6000612dd2848285016129e7565b91505092915050565b6000604082019050612df06000830185612cba565b612dfd6020830184612cba565b9392505050565b7f556e697377617056323a204c4f434b4544000000000000000000000000000000600082015250565b6000612e3a601183612af4565b9150612e4582612e04565b602082019050919050565b60006020820190508181036000830152612e6981612e2d565b9050919050565b7f556e697377617056323a20494e53554646494349454e545f4f55545055545f4160008201527f4d4f554e54000000000000000000000000000000000000000000000000000000602082015250565b6000612ecc602583612af4565b9150612ed782612e70565b604082019050919050565b60006020820190508181036000830152612efb81612ebf565b9050919050565b7f556e697377617056323a20494e53554646494349454e545f4c4951554944495460008201527f5900000000000000000000000000000000000000000000000000000000000000602082015250565b6000612f5e602183612af4565b9150612f6982612f02565b604082019050919050565b60006020820190508181036000830152612f8d81612f51565b9050919050565b7f556e697377617056323a20494e56414c49445f544f0000000000000000000000600082015250565b6000612fca601583612af4565b9150612fd582612f94565b602082019050919050565b60006020820190508181036000830152612ff981612fbd565b9050919050565b600082825260208201905092915050565b82818337600083830152505050565b600061302c8385613000565b9350613039838584613011565b61304283612b2f565b840190509392505050565b60006080820190506130626000830188612c90565b61306f6020830187612cba565b61307c6040830186612cba565b818103606083015261308f818486613020565b90509695505050505050565b6000815190506130aa81612972565b92915050565b6000602082840312156130c6576130c561295e565b5b60006130d48482850161309b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061311782612968565b915061312283612968565b925082820390508181111561313a576131396130dd565b5b92915050565b7f556e697377617056323a20494e53554646494349454e545f494e5055545f414d60008201527f4f554e5400000000000000000000000000000000000000000000000000000000602082015250565b600061319c602483612af4565b91506131a782613140565b604082019050919050565b600060208201905081810360008301526131cb8161318f565b9050919050565b7f556e697377617056323a204b0000000000000000000000000000000000000000600082015250565b6000613208600c83612af4565b9150613213826131d2565b602082019050919050565b60006020820190508181036000830152613237816131fb565b9050919050565b60006080820190506132536000830187612cba565b6132606020830186612cba565b61326d6040830185612cba565b61327a6060830184612cba565b95945050505050565b7f556e697377617056323a20464f5242494444454e000000000000000000000000600082015250565b60006132b9601483612af4565b91506132c482613283565b602082019050919050565b600060208201905081810360008301526132e8816132ac565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061332982612968565b915061333483612968565b925082613344576133436132ef565b5b828204905092915050565b7f556e697377617056323a20494e53554646494349454e545f4c4951554944495460008201527f595f4d494e544544000000000000000000000000000000000000000000000000602082015250565b60006133ab602883612af4565b91506133b68261334f565b604082019050919050565b600060208201905081810360008301526133da8161339e565b9050919050565b7f556e697377617056323a20494e53554646494349454e545f4c4951554944495460008201527f595f4255524e4544000000000000000000000000000000000000000000000000602082015250565b600061343d602883612af4565b9150613448826133e1565b604082019050919050565b6000602082019050818103600083015261346c81613430565b9050919050565b60006040820190506134886000830185612c90565b6134956020830184612cba565b9392505050565b600081519050919050565b600081905092915050565b60006134bd8261349c565b6134c781856134a7565b93506134d7818560208601612b05565b80840191505092915050565b60006134ef82846134b2565b915081905092915050565b61350381612c5a565b811461350e57600080fd5b50565b600081519050613520816134fa565b92915050565b60006020828403121561353c5761353b61295e565b5b600061354a84828501613511565b91505092915050565b7f556e697377617056323a205452414e534645525f4641494c4544000000000000600082015250565b6000613589601a83612af4565b915061359482613553565b602082019050919050565b600060208201905081810360008301526135b88161357c565b9050919050565b60006135ca82612968565b91506135d583612968565b92508282026135e381612968565b915082820484148315176135fa576135f96130dd565b5b5092915050565b7f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000600082015250565b6000613637601483612af4565b915061364282613601565b602082019050919050565b600060208201905081810360008301526136668161362a565b9050919050565b7f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000600082015250565b60006136a3601583612af4565b91506136ae8261366d565b602082019050919050565b600060208201905081810360008301526136d281613696565b9050919050565b7f556e697377617056323a204f564552464c4f5700000000000000000000000000600082015250565b600061370f601383612af4565b915061371a826136d9565b602082019050919050565b6000602082019050818103600083015261373e81613702565b9050919050565b600061375082612968565b915061375b83612968565b92508261376b5761376a6132ef565b5b828206905092915050565b600061378182612bc4565b915061378c83612bc4565b9250828203905063ffffffff8111156137a8576137a76130dd565b5b92915050565b60006137b982612968565b91506137c483612968565b92508282019050808211156137dc576137db6130dd565b5b92915050565b60006040820190506137f76000830185612bb5565b6138046020830184612bb5565b9392505050565b60008151905061381a816129d0565b92915050565b6000602082840312156138365761383561295e565b5b60006138448482850161380b565b91505092915050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b60006138808261384d565b915061388b8361384d565b92508282026138998161384d565b915082820484148315176138b0576138af6130dd565b5b5092915050565b60006138c28261384d565b91506138cd8361384d565b9250826138dd576138dc6132ef565b5b828204905092915050565b7f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000600082015250565b600061391e601483612af4565b9150613929826138e8565b602082019050919050565b6000602082019050818103600083015261394d81613911565b905091905056fea26469706673582212205db460c60a4ec9b6a83bb3ecb01cd8e1aec66a0701430bbf3c7971bc95e5f0d764736f6c637829302e382e31382d646576656c6f702e323032322e31302e31312b636f6d6d69742e3233386163346664005aa264697066735822122005f20ec7226c006ee3a4e5b0e6319475a0a5ffb91f0ca7b1d862c340d649257564736f6c637829302e382e31382d646576656c6f702e323032322e31302e31312b636f6d6d69742e3233386163346664005a",
}

// UniswapV2FactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use UniswapV2FactoryMetaData.ABI instead.
var UniswapV2FactoryABI = UniswapV2FactoryMetaData.ABI

// UniswapV2FactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use UniswapV2FactoryMetaData.Bin instead.
var UniswapV2FactoryBin = UniswapV2FactoryMetaData.Bin

// DeployUniswapV2Factory deploys a new Ethereum contract, binding an instance of UniswapV2Factory to it.
func DeployUniswapV2Factory(auth *bind.TransactOpts, backend bind.ContractBackend, _feeToSetter common.Address) (common.Address, *types.Transaction, *UniswapV2Factory, error) {
	parsed, err := UniswapV2FactoryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(UniswapV2FactoryBin), backend, _feeToSetter)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &UniswapV2Factory{UniswapV2FactoryCaller: UniswapV2FactoryCaller{contract: contract}, UniswapV2FactoryTransactor: UniswapV2FactoryTransactor{contract: contract}, UniswapV2FactoryFilterer: UniswapV2FactoryFilterer{contract: contract}}, nil
}

// UniswapV2Factory is an auto generated Go binding around an Ethereum contract.
type UniswapV2Factory struct {
	UniswapV2FactoryCaller     // Read-only binding to the contract
	UniswapV2FactoryTransactor // Write-only binding to the contract
	UniswapV2FactoryFilterer   // Log filterer for contract events
}

// UniswapV2FactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type UniswapV2FactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UniswapV2FactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type UniswapV2FactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UniswapV2FactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type UniswapV2FactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UniswapV2FactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type UniswapV2FactorySession struct {
	Contract     *UniswapV2Factory // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// UniswapV2FactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type UniswapV2FactoryCallerSession struct {
	Contract *UniswapV2FactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// UniswapV2FactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type UniswapV2FactoryTransactorSession struct {
	Contract     *UniswapV2FactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// UniswapV2FactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type UniswapV2FactoryRaw struct {
	Contract *UniswapV2Factory // Generic contract binding to access the raw methods on
}

// UniswapV2FactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type UniswapV2FactoryCallerRaw struct {
	Contract *UniswapV2FactoryCaller // Generic read-only contract binding to access the raw methods on
}

// UniswapV2FactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type UniswapV2FactoryTransactorRaw struct {
	Contract *UniswapV2FactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewUniswapV2Factory creates a new instance of UniswapV2Factory, bound to a specific deployed contract.
func NewUniswapV2Factory(address common.Address, backend bind.ContractBackend) (*UniswapV2Factory, error) {
	contract, err := bindUniswapV2Factory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &UniswapV2Factory{UniswapV2FactoryCaller: UniswapV2FactoryCaller{contract: contract}, UniswapV2FactoryTransactor: UniswapV2FactoryTransactor{contract: contract}, UniswapV2FactoryFilterer: UniswapV2FactoryFilterer{contract: contract}}, nil
}

// NewUniswapV2FactoryCaller creates a new read-only instance of UniswapV2Factory, bound to a specific deployed contract.
func NewUniswapV2FactoryCaller(address common.Address, caller bind.ContractCaller) (*UniswapV2FactoryCaller, error) {
	contract, err := bindUniswapV2Factory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &UniswapV2FactoryCaller{contract: contract}, nil
}

// NewUniswapV2FactoryTransactor creates a new write-only instance of UniswapV2Factory, bound to a specific deployed contract.
func NewUniswapV2FactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*UniswapV2FactoryTransactor, error) {
	contract, err := bindUniswapV2Factory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &UniswapV2FactoryTransactor{contract: contract}, nil
}

// NewUniswapV2FactoryFilterer creates a new log filterer instance of UniswapV2Factory, bound to a specific deployed contract.
func NewUniswapV2FactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*UniswapV2FactoryFilterer, error) {
	contract, err := bindUniswapV2Factory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &UniswapV2FactoryFilterer{contract: contract}, nil
}

// bindUniswapV2Factory binds a generic wrapper to an already deployed contract.
func bindUniswapV2Factory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(UniswapV2FactoryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UniswapV2Factory *UniswapV2FactoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _UniswapV2Factory.Contract.UniswapV2FactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UniswapV2Factory *UniswapV2FactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UniswapV2Factory.Contract.UniswapV2FactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UniswapV2Factory *UniswapV2FactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UniswapV2Factory.Contract.UniswapV2FactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UniswapV2Factory *UniswapV2FactoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _UniswapV2Factory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UniswapV2Factory *UniswapV2FactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UniswapV2Factory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UniswapV2Factory *UniswapV2FactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UniswapV2Factory.Contract.contract.Transact(opts, method, params...)
}

// AllPairs is a free data retrieval call binding the contract method 0x1e3dd18b.
//
// Solidity: function allPairs(uint256 ) view returns(address)
func (_UniswapV2Factory *UniswapV2FactoryCaller) AllPairs(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _UniswapV2Factory.contract.Call(opts, &out, "allPairs", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AllPairs is a free data retrieval call binding the contract method 0x1e3dd18b.
//
// Solidity: function allPairs(uint256 ) view returns(address)
func (_UniswapV2Factory *UniswapV2FactorySession) AllPairs(arg0 *big.Int) (common.Address, error) {
	return _UniswapV2Factory.Contract.AllPairs(&_UniswapV2Factory.CallOpts, arg0)
}

// AllPairs is a free data retrieval call binding the contract method 0x1e3dd18b.
//
// Solidity: function allPairs(uint256 ) view returns(address)
func (_UniswapV2Factory *UniswapV2FactoryCallerSession) AllPairs(arg0 *big.Int) (common.Address, error) {
	return _UniswapV2Factory.Contract.AllPairs(&_UniswapV2Factory.CallOpts, arg0)
}

// AllPairsLength is a free data retrieval call binding the contract method 0x574f2ba3.
//
// Solidity: function allPairsLength() view returns(uint256)
func (_UniswapV2Factory *UniswapV2FactoryCaller) AllPairsLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _UniswapV2Factory.contract.Call(opts, &out, "allPairsLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AllPairsLength is a free data retrieval call binding the contract method 0x574f2ba3.
//
// Solidity: function allPairsLength() view returns(uint256)
func (_UniswapV2Factory *UniswapV2FactorySession) AllPairsLength() (*big.Int, error) {
	return _UniswapV2Factory.Contract.AllPairsLength(&_UniswapV2Factory.CallOpts)
}

// AllPairsLength is a free data retrieval call binding the contract method 0x574f2ba3.
//
// Solidity: function allPairsLength() view returns(uint256)
func (_UniswapV2Factory *UniswapV2FactoryCallerSession) AllPairsLength() (*big.Int, error) {
	return _UniswapV2Factory.Contract.AllPairsLength(&_UniswapV2Factory.CallOpts)
}

// FeeTo is a free data retrieval call binding the contract method 0x017e7e58.
//
// Solidity: function feeTo() view returns(address)
func (_UniswapV2Factory *UniswapV2FactoryCaller) FeeTo(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _UniswapV2Factory.contract.Call(opts, &out, "feeTo")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FeeTo is a free data retrieval call binding the contract method 0x017e7e58.
//
// Solidity: function feeTo() view returns(address)
func (_UniswapV2Factory *UniswapV2FactorySession) FeeTo() (common.Address, error) {
	return _UniswapV2Factory.Contract.FeeTo(&_UniswapV2Factory.CallOpts)
}

// FeeTo is a free data retrieval call binding the contract method 0x017e7e58.
//
// Solidity: function feeTo() view returns(address)
func (_UniswapV2Factory *UniswapV2FactoryCallerSession) FeeTo() (common.Address, error) {
	return _UniswapV2Factory.Contract.FeeTo(&_UniswapV2Factory.CallOpts)
}

// FeeToSetter is a free data retrieval call binding the contract method 0x094b7415.
//
// Solidity: function feeToSetter() view returns(address)
func (_UniswapV2Factory *UniswapV2FactoryCaller) FeeToSetter(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _UniswapV2Factory.contract.Call(opts, &out, "feeToSetter")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FeeToSetter is a free data retrieval call binding the contract method 0x094b7415.
//
// Solidity: function feeToSetter() view returns(address)
func (_UniswapV2Factory *UniswapV2FactorySession) FeeToSetter() (common.Address, error) {
	return _UniswapV2Factory.Contract.FeeToSetter(&_UniswapV2Factory.CallOpts)
}

// FeeToSetter is a free data retrieval call binding the contract method 0x094b7415.
//
// Solidity: function feeToSetter() view returns(address)
func (_UniswapV2Factory *UniswapV2FactoryCallerSession) FeeToSetter() (common.Address, error) {
	return _UniswapV2Factory.Contract.FeeToSetter(&_UniswapV2Factory.CallOpts)
}

// GetPair is a free data retrieval call binding the contract method 0xe6a43905.
//
// Solidity: function getPair(address , address ) view returns(address)
func (_UniswapV2Factory *UniswapV2FactoryCaller) GetPair(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (common.Address, error) {
	var out []interface{}
	err := _UniswapV2Factory.contract.Call(opts, &out, "getPair", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetPair is a free data retrieval call binding the contract method 0xe6a43905.
//
// Solidity: function getPair(address , address ) view returns(address)
func (_UniswapV2Factory *UniswapV2FactorySession) GetPair(arg0 common.Address, arg1 common.Address) (common.Address, error) {
	return _UniswapV2Factory.Contract.GetPair(&_UniswapV2Factory.CallOpts, arg0, arg1)
}

// GetPair is a free data retrieval call binding the contract method 0xe6a43905.
//
// Solidity: function getPair(address , address ) view returns(address)
func (_UniswapV2Factory *UniswapV2FactoryCallerSession) GetPair(arg0 common.Address, arg1 common.Address) (common.Address, error) {
	return _UniswapV2Factory.Contract.GetPair(&_UniswapV2Factory.CallOpts, arg0, arg1)
}

// CreatePair is a paid mutator transaction binding the contract method 0xc9c65396.
//
// Solidity: function createPair(address tokenA, address tokenB) returns(address pair)
func (_UniswapV2Factory *UniswapV2FactoryTransactor) CreatePair(opts *bind.TransactOpts, tokenA common.Address, tokenB common.Address) (*types.Transaction, error) {
	return _UniswapV2Factory.contract.Transact(opts, "createPair", tokenA, tokenB)
}

// CreatePair is a paid mutator transaction binding the contract method 0xc9c65396.
//
// Solidity: function createPair(address tokenA, address tokenB) returns(address pair)
func (_UniswapV2Factory *UniswapV2FactorySession) CreatePair(tokenA common.Address, tokenB common.Address) (*types.Transaction, error) {
	return _UniswapV2Factory.Contract.CreatePair(&_UniswapV2Factory.TransactOpts, tokenA, tokenB)
}

// CreatePair is a paid mutator transaction binding the contract method 0xc9c65396.
//
// Solidity: function createPair(address tokenA, address tokenB) returns(address pair)
func (_UniswapV2Factory *UniswapV2FactoryTransactorSession) CreatePair(tokenA common.Address, tokenB common.Address) (*types.Transaction, error) {
	return _UniswapV2Factory.Contract.CreatePair(&_UniswapV2Factory.TransactOpts, tokenA, tokenB)
}

// SetFeeTo is a paid mutator transaction binding the contract method 0xf46901ed.
//
// Solidity: function setFeeTo(address _feeTo) returns()
func (_UniswapV2Factory *UniswapV2FactoryTransactor) SetFeeTo(opts *bind.TransactOpts, _feeTo common.Address) (*types.Transaction, error) {
	return _UniswapV2Factory.contract.Transact(opts, "setFeeTo", _feeTo)
}

// SetFeeTo is a paid mutator transaction binding the contract method 0xf46901ed.
//
// Solidity: function setFeeTo(address _feeTo) returns()
func (_UniswapV2Factory *UniswapV2FactorySession) SetFeeTo(_feeTo common.Address) (*types.Transaction, error) {
	return _UniswapV2Factory.Contract.SetFeeTo(&_UniswapV2Factory.TransactOpts, _feeTo)
}

// SetFeeTo is a paid mutator transaction binding the contract method 0xf46901ed.
//
// Solidity: function setFeeTo(address _feeTo) returns()
func (_UniswapV2Factory *UniswapV2FactoryTransactorSession) SetFeeTo(_feeTo common.Address) (*types.Transaction, error) {
	return _UniswapV2Factory.Contract.SetFeeTo(&_UniswapV2Factory.TransactOpts, _feeTo)
}

// SetFeeToSetter is a paid mutator transaction binding the contract method 0xa2e74af6.
//
// Solidity: function setFeeToSetter(address _feeToSetter) returns()
func (_UniswapV2Factory *UniswapV2FactoryTransactor) SetFeeToSetter(opts *bind.TransactOpts, _feeToSetter common.Address) (*types.Transaction, error) {
	return _UniswapV2Factory.contract.Transact(opts, "setFeeToSetter", _feeToSetter)
}

// SetFeeToSetter is a paid mutator transaction binding the contract method 0xa2e74af6.
//
// Solidity: function setFeeToSetter(address _feeToSetter) returns()
func (_UniswapV2Factory *UniswapV2FactorySession) SetFeeToSetter(_feeToSetter common.Address) (*types.Transaction, error) {
	return _UniswapV2Factory.Contract.SetFeeToSetter(&_UniswapV2Factory.TransactOpts, _feeToSetter)
}

// SetFeeToSetter is a paid mutator transaction binding the contract method 0xa2e74af6.
//
// Solidity: function setFeeToSetter(address _feeToSetter) returns()
func (_UniswapV2Factory *UniswapV2FactoryTransactorSession) SetFeeToSetter(_feeToSetter common.Address) (*types.Transaction, error) {
	return _UniswapV2Factory.Contract.SetFeeToSetter(&_UniswapV2Factory.TransactOpts, _feeToSetter)
}

// UniswapV2FactoryPairCreatedIterator is returned from FilterPairCreated and is used to iterate over the raw logs and unpacked data for PairCreated events raised by the UniswapV2Factory contract.
type UniswapV2FactoryPairCreatedIterator struct {
	Event *UniswapV2FactoryPairCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UniswapV2FactoryPairCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UniswapV2FactoryPairCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UniswapV2FactoryPairCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UniswapV2FactoryPairCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UniswapV2FactoryPairCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UniswapV2FactoryPairCreated represents a PairCreated event raised by the UniswapV2Factory contract.
type UniswapV2FactoryPairCreated struct {
	Token0 common.Address
	Token1 common.Address
	Pair   common.Address
	Arg3   *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterPairCreated is a free log retrieval operation binding the contract event 0x0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9.
//
// Solidity: event PairCreated(address indexed token0, address indexed token1, address pair, uint256 arg3)
func (_UniswapV2Factory *UniswapV2FactoryFilterer) FilterPairCreated(opts *bind.FilterOpts, token0 []common.Address, token1 []common.Address) (*UniswapV2FactoryPairCreatedIterator, error) {

	var token0Rule []interface{}
	for _, token0Item := range token0 {
		token0Rule = append(token0Rule, token0Item)
	}
	var token1Rule []interface{}
	for _, token1Item := range token1 {
		token1Rule = append(token1Rule, token1Item)
	}

	logs, sub, err := _UniswapV2Factory.contract.FilterLogs(opts, "PairCreated", token0Rule, token1Rule)
	if err != nil {
		return nil, err
	}
	return &UniswapV2FactoryPairCreatedIterator{contract: _UniswapV2Factory.contract, event: "PairCreated", logs: logs, sub: sub}, nil
}

// WatchPairCreated is a free log subscription operation binding the contract event 0x0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9.
//
// Solidity: event PairCreated(address indexed token0, address indexed token1, address pair, uint256 arg3)
func (_UniswapV2Factory *UniswapV2FactoryFilterer) WatchPairCreated(opts *bind.WatchOpts, sink chan<- *UniswapV2FactoryPairCreated, token0 []common.Address, token1 []common.Address) (event.Subscription, error) {

	var token0Rule []interface{}
	for _, token0Item := range token0 {
		token0Rule = append(token0Rule, token0Item)
	}
	var token1Rule []interface{}
	for _, token1Item := range token1 {
		token1Rule = append(token1Rule, token1Item)
	}

	logs, sub, err := _UniswapV2Factory.contract.WatchLogs(opts, "PairCreated", token0Rule, token1Rule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UniswapV2FactoryPairCreated)
				if err := _UniswapV2Factory.contract.UnpackLog(event, "PairCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePairCreated is a log parse operation binding the contract event 0x0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9.
//
// Solidity: event PairCreated(address indexed token0, address indexed token1, address pair, uint256 arg3)
func (_UniswapV2Factory *UniswapV2FactoryFilterer) ParsePairCreated(log types.Log) (*UniswapV2FactoryPairCreated, error) {
	event := new(UniswapV2FactoryPairCreated)
	if err := _UniswapV2Factory.contract.UnpackLog(event, "PairCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
